lme(sqrt.mortality ~ SSCI+log(species_richness, base=2),random=~1|sp_comp,method="REML", data = data_plot),
lme(total_AWP_m3 ~ SSCI+log(species_richness, base=2)+MT_AM+MT_EM+sqrt.mortality,random=~1|sp_comp,method="REML", data = data_plot))
summary(mod1,standardize = "scale")
log(data_plot$species_richness, base=2)
data_plot$log_species_richness<-log(data_plot$species_richness, base=2)
mod1 = psem(
lme(SSCI ~ log_species_richness, random=~1|sp_comp,method="REML", data = data_plot),
lme(sqrt.mortality ~ SSCI+log_species_richness,random=~1|sp_comp,method="REML", data = data_plot),
lme(total_AWP_m3 ~ SSCI+log_species_richness+MT_AM+MT_EM+sqrt.mortality,random=~1|sp_comp,method="REML", data = data_plot))
summary(mod1,standardize = "scale")
#Load tree volume data for 2015 and 2021
data <- read_excel(paste(path,
"Data_tree_productivity.xlsx",
sep="/"),
sheet = "Data_trees",
na="NA")
data$plotID<-as.numeric(data$plotID)
#Calculate annual wood productivity (AWP)
data$AWP_cm3<-(data$volume2021_cm3-data$volume2015_cm3)/6
#Rename species
data$species[data$species=="Prunusavium"]<-"Prunus avium"
data$species[data$species=="Tiliaplatyphyllos"]<-"Tilia platyphyllos"
data$species[data$species=="Fagussylvatica"]<-"Fagus sylvatica"
data$species[data$species=="Fraxinusexcelsior"]<-"Fraxinus excelsior"
data$species[data$species=="Sorbusaucuparia"]<-"Sorbus aucuparia"
data$species[data$species=="Quercuspetraea"]<-"Quercus petraea"
data$species[data$species=="Betulapendula"]<-"Betula pendula"
data$species[data$species=="Acerpseudoplatanus"]<-"Acer pseudoplatanus"
data$species[data$species=="Aesculushippocastanum"]<-"Aesculus hippocastanum"
data$species[data$species=="Carpinusbetulus"]<-"Carpinus betulus"
#Add mycorrhizal type
data <- data %>%
add_column(myc_type="AM", .after="species")
data$myc_type[data$species %in% c("Betula pendula",
"Quercus petraea",
"Tilia platyphyllos",
"Carpinus betulus",
"Fagus sylvatica")]<-"EM"
#Create plot level dataset
data_plot<-data %>%
group_by(plotID) %>%
summarise(species_richness=length(unique(species)),
total_volume2021_cm3=sum(volume2021_cm3, na.rm=T),
total_AWP_m3=sum(AWP_cm3, na.rm=TRUE)/1000000)%>%
add_column(myc_type=NA, .after = "species_richness") %>%
add_column(sp_comp=NA, .after="myc_type")
#Add species richness and shade tolerance values
data<-data %>%
add_column(species_richness=data_plot$species_richness[match(data$plotID, data_plot$plotID)],
.before = "myc_type")
data_plot$log_species_richness<-log(data_plot$species_richness, base=2)
data$shade_tolerance<-NA
data$shade_tolerance[data$species=="Aesculus hippocastanum"]<-3.43
data$shade_tolerance[data$species=="Sorbus aucuparia"]<-2.73
data$shade_tolerance[data$species=="Fraxinus excelsior"]<-2.66
data$shade_tolerance[data$species=="Acer pseudoplatanus"]<-3.73
data$shade_tolerance[data$species=="Prunus avium"]<-3.33
data$shade_tolerance[data$species=="Fagus sylvatica"]<-4.56
data$shade_tolerance[data$species=="Quercus petraea"]<-2.73
data$shade_tolerance[data$species=="Carpinus betulus"]<-3.97
data$shade_tolerance[data$species=="Betula pendula"]<-2.03
data$shade_tolerance[data$species=="Tilia platyphyllos"]<-4
#Add SSCI, ENL, myc_type and sp composition to plot data
data_SSCI <- read_excel("Postdoc/Experiments/MyDiv/Data/Data MyDiv Tama_R.xlsx",
sheet = "RData")
data_plot$SSCI<-data_SSCI$SSCI[match(data_plot$plotID, data_SSCI$Plot.no)]
data_plot$MeanFrac<-data_SSCI$MeanFrac[match(data_plot$plotID, data_SSCI$Plot.no)]
data_plot$ENL<-data_SSCI$ENL[match(data_plot$plotID, data_SSCI$Plot.no)]
data_plot$myc_type<-data_SSCI$Mycorrhizal.type[match(data_plot$plotID, data_SSCI$Plot.no)]
data_plot$myc_type<-recode_factor(data_plot$myc_type, A="AM", E="EM", AE="AM+EM")
data_plot$sp_comp<-data_SSCI$Species.composition_code[match(data_plot$plotID, data_SSCI$Plot.no)]
data_plot$sp_comp<-factor(data_plot$sp_comp)
#Add binary code for mycorrhizal associations
data_plot$MT_AM<-data_SSCI$MT_AM[match(data_plot$plotID, data_SSCI$Plot.no)]
data_plot$MT_EM<-data_SSCI$MT_EM[match(data_plot$plotID, data_SSCI$Plot.no)]
#Add tree mortality
data_plot$mortality<-data_SSCI$Mortality_15_21[match(data_plot$plotID, data_SSCI$Plot.no)]
data_plot$sqrt.mortality<-sqrt(data_plot$mortality)
#Calculate average tree productivity per species and per plot
data<-data %>%
group_by(plotID, species, species_richness, myc_type) %>%
summarise(volume2021_cm3=mean(volume2021_cm3, na.rm=TRUE),
diameter2021_cm=mean(diameter2021_cm, na.rm=TRUE),
height2021_cm=mean(height2021_cm, na.rm=TRUE),
shade_tolerance=mean(shade_tolerance, na.rm=TRUE),
total_AWP_m3=sum(AWP_cm3, na.rm=TRUE)/1000000,
avg_AWP_m3=mean(AWP_cm3, na.rm=TRUE)/1000000)
#Calculate standardised productivity
#Use min-max standardisation
data$AWP_m3_std<-NA
for (i in 1:nrow(data)){
species<-data$species[i]
mini<-min(data$avg_AWP_m3[data$species==species])
maxi<-max(data$avg_AWP_m3[data$species==species])
data$AWP_m3_std[i]<-(data$avg_AWP_m3[i]-mini)/(maxi-mini)
}
remove(i, maxi, mini, species)
#| echo: true
#| eval: true
# Additive partitioning of biodiversity effects
# Method of Loreau and Hector
mix<-data.frame(matrix(0, nrow=80, ncol=10))
colnames(mix)<-unique(data$species)
for (i in 1:nrow(data)){
mix[as.numeric(data$plotID[i]),data$species[i]]<-data$total_AWP_m3[i]
}
mono<-mix[which(data_plot$species_richness==1),]
mix<-mix[-which(data_plot$species_richness==1),]
ry<-data_abundance[-1]
colnames(ry)<-str_replace(sp_abb$Species[match(colnames(ry), sp_abb$Species2)],
pattern="[.]",
replacement=" ")
ry<-as.matrix(ry[,sort(colnames(ry))])
mix<-as.matrix(mix[,sort(colnames(mix))])
mono<-as.matrix(mono[,sort(colnames(mono))])
#Remove monocultures in ry
ry<-ry[-which(data_plot$species_richness==1),]
part<-data.frame(apm(mix=mix, mono=mono, ry=ry, method="loreau"))
part <- part %>%
add_column(plotID=as.numeric(rownames(part)),
.before="NBE")
data_plot <- data_plot %>%
group_by(plotID)%>%
left_join(part)
remove(part, i, mix, mono, ry)
#| echo: true
#| eval: true
#Calculate delta SSCI for each plot
SSCI_mono<-data_plot %>%
filter(species_richness==1) %>%
add_column(species=NA,
.after="plotID")
SSCI_mono$species<-data$species[match(SSCI_mono$plotID, data$plotID)]
SSCI_mono <- SSCI_mono %>%
group_by(species) %>%
summarise(avg_SSCI=mean(SSCI))
sp_names<-SSCI_mono$species
SSCI_mono<-as.data.frame(SSCI_mono[,-1])
colnames(SSCI_mono)<-"SSCI"
rownames(SSCI_mono)<-sp_abb$Species2[match(sp_names, str_replace(sp_abb$Species,
pattern="[.]",
replacement=" "))]
data_plot$SSCI_pred<-functcomp(x=as.matrix(SSCI_mono), a=as.matrix(data_abundance[,-1]))$SSCI
data_plot$delta_SSCI<-data_plot$SSCI-data_plot$SSCI_pred
data_plot$SSCI_pred[data_plot$species_richness==1]<-NA
data_plot$delta_SSCI[data_plot$species_richness==1]<-NA
remove(sp_names, SSCI_mono)
#| echo: true
#| eval: true
#Calculate CWM and functional dispersion of tree height
fun_traits<-data.frame(plotID=1:80,
CWM_height=rep(NA, 80),
FD_height=rep(NA, 80))
for (i in 1:nrow(fun_traits)){
x<-data %>%
filter(plotID==i)
if (nrow(x)>1){
x$species<-sp_abb$Species2[match(x$species, str_replace(sp_abb$Species,
pattern="[.]",
replacement=" "))]
sp<-x$species
xh<-as.data.frame(matrix(x$height2021_cm, ncol=1))
rownames(xh)<-sp
a <- data_abundance[i,sp]
fun_h<-dbFD(xh, a, messages=F)
fun_traits$CWM_height[i]<-fun_h$CWM[1,1]
fun_traits$FD_height[i]<-fun_h$FDis}
else {
fun_traits$CWM_height[i]<-x$height2021_cm[1]
fun_traits$FD_height[i]<-0}
}
data_plot<-data_plot %>%
group_by(plotID) %>%
left_join(fun_traits)
remove(a, fun_h, fun_traits, x, xh, i, sp)
#| echo: true
#| eval: true
#Calculate CWM and functional dispersion of shade tolerance
fun_traits<-data %>%
group_by(species) %>%
summarise(shade_tolerance=mean(shade_tolerance))
sp<-fun_traits$species
fun_traits<-matrix(fun_traits$shade_tolerance, nrow=10, ncol=1)
rownames(fun_traits)<-sp_abb$Species2[match(sp, str_replace(sp_abb$Species,
pattern="[.]",
replacement=" "))]
colnames(fun_traits)<-"shade_tolerance"
fun_s<-dbFD(x=fun_traits, a=as.matrix(data_abundance[,-1]), messages=F)
data_plot$CWM_ST<-fun_s$CWM$shade_tolerance
data_plot$FD_ST<-fun_s$FDis
remove(fun_s, fun_traits, sp)
#| echo: true
#| eval: true
plots_fagus<-data_SSCI$Plot.no[str_detect(data_SSCI$Species.composition, "Fagus")]
plots_betula<-data_SSCI$Plot.no[str_detect(data_SSCI$Species.composition, "Betula")]
plots_both<-intersect(plots_fagus, plots_betula)
data_plot$Fagus_Betula<-0
data_plot$Fagus_Betula[match(plots_both, data_plot$plotID)]<-1
remove(plots_betula, plots_fagus, plots_both)
#Create data frame to store the results
data_plasticity<-data.frame(species=rep(NA, 10),
RDPI_AWP=rep(NA, 10),
RDPI_volume=rep(NA, 10),
RDPI_diameter=rep(NA, 10),
RDPI_height=rep(NA, 10))
row<-0
dist<-list()
#Calculate RDPI for each species
for (sp in unique(data$species)){
d_awp<-c()
d_volume<-c()
d_diameter<-c()
d_height<-c()
row<-row+1
sub<-data[data$species==sp,]
sub$index<-1:nrow(sub)
comb<-combn(sub$index,
m=2)
for (i in 1:ncol(comb)){
if (identical(x=sub$species_richness[comb[1,i]],
y=sub$species_richness[comb[2,i]])) {}
else {
x1<-sub$avg_AWP_m3[comb[1,i]]
x2<-sub$avg_AWP_m3[comb[2,i]]
if (x2>x1) {d_awp<-append(d_awp, (x2-x1)/(x2+x1))}
if (x1>x2) {d_awp<-append(d_awp, (x1-x2)/(x1+x2))}
x1<-sub$volume2021_cm3[comb[1,i]]
x2<-sub$volume2021_cm3[comb[2,i]]
if (x2>x1) {d_volume<-append(d_volume, (x2-x1)/(x2+x1))}
if (x1>x2) {d_volume<-append(d_volume, (x1-x2)/(x1+x2))}
x1<-sub$diameter2021_cm[comb[1,i]]
x2<-sub$diameter2021_cm[comb[2,i]]
if (x2>x1) {d_diameter<-append(d_diameter, (x2-x1)/(x2+x1))}
if (x1>x2) {d_diameter<-append(d_diameter, (x1-x2)/(x1+x2))}
x1<-sub$height2021_cm[comb[1,i]]
x2<-sub$height2021_cm[comb[2,i]]
if (x2>x1) {d_height<-append(d_height, (x2-x1)/(x2+x1))}
if (x1>x2) {d_height<-append(d_height, (x1-x2)/(x1+x2))}
}
dist[[row]]<-d_awp
data_plasticity[row,"species"]<-sp
data_plasticity[row, "RDPI_AWP"]<-mean(d_awp)
data_plasticity[row, "RDPI_volume"]<-mean(d_volume)
data_plasticity[row, "RDPI_diameter"]<-mean(d_diameter)
data_plasticity[row, "RDPI_height"]<-mean(d_height)
}
remove(comb, dist, p, sub, d_awp, d_diameter, d_height, d_volume, i, row, sp, x1, x2)
#Export results in a csv file
# write.csv(data_plasticity,
#           "C:/Users/Delory/Documents/Postdoc/Experiments/MyDiv/data_plasticity_2021.csv",
#           row.names=F)
#| echo: true
#| eval: true
#Calculate CWM and functional dispersion of RDPI
fun_traits<-data_plasticity[,1:2]
fun_traits<-fun_traits[order(fun_traits$species),]
sp<-fun_traits$species
fun_traits<-matrix(fun_traits$RDPI_AWP, nrow=10, ncol=1)
rownames(fun_traits)<-sp_abb$Species2[match(sp, str_replace(sp_abb$Species,
pattern="[.]",
replacement=" "))]
colnames(fun_traits)<-"RDPI"
fun_r<-dbFD(x=fun_traits, a=as.matrix(data_abundance[,-1]), messages=F)
data_plot$CWM_RDPI<-fun_r$CWM$RDPI
data_plot$FD_RDPI<-fun_r$FDis
remove(fun_r, fun_traits, sp)
#Select monoculture plots
mono<-data_plot %>%
filter(species_richness==1)
mono$species<-data$species[match(mono$plotID, data$plotID)]
mono$myc_type<-"AM"
mono$myc_type[mono$species %in% c("Betula pendula",
"Quercus petraea",
"Tilia platyphyllos",
"Carpinus betulus",
"Fagus sylvatica")]<-"EM"
#Calculate average productivity for each species in monoculture
mono<-mono %>%
group_by(species, myc_type) %>%
summarise(avg_AWP_m3=round(mean(total_AWP_m3), 2))
mono$RDPI_AWP<-round(data_plasticity$RDPI_AWP[match(mono$species, data_plasticity$species)], 2)
mono$RDPI_volume<-round(data_plasticity$RDPI_volume[match(mono$species, data_plasticity$species)], 2)
mono$shade_tolerance<-c(3.73, 3.43, 2.03, 3.97, 4.56, 2.66, 3.33, 2.73, 2.73, 4.00)
mono<-mono[order(mono$myc_type, mono$avg_AWP_m3),]
#Print summary table for monocultures
knitr::kable(mono)
#Export summary table as csv
# write.csv(mono,
#           "C:/Users/Delory/Documents/Postdoc/Experiments/MyDiv/Table_species.csv",
#           row.names = F)
mod1 = psem(
lme(SSCI ~ log_species_richness, random=~1|sp_comp,method="REML", data = data_plot),
lme(sqrt.mortality ~ SSCI+log_species_richness,random=~1|sp_comp,method="REML", data = data_plot),
lme(total_AWP_m3 ~ SSCI+log_species_richness+MT_AM+MT_EM+sqrt.mortality,random=~1|sp_comp,method="REML", data = data_plot))
summary(mod1,standardize = "scale")
summary(data_plot)
plot(data_plot$SSCI, data_plot$total_AWP_m3)
mod1 = psem(
lme(SSCI ~ log_species_richness, random=~1|sp_comp,method="REML", data = data_plot),
lme(sqrt.mortality ~ SSCI+log_species_richness,random=~1|sp_comp,method="REML", data = data_plot),
lme(total_AWP_m3 ~ SSCI+log_species_richness+MT_AM+MT_EM+sqrt.mortality,random=~1|sp_comp,method="REML", data = data_plot))
summary(mod1,standardize = "scale")
plot(data_SSCI$PAVI_15_21_m3, data_plot$total_AWP_m3)
library(readxl)
data <- read_excel("C:/Users/Delory/Downloads/LEG_CTL_sample_processing.xlsx")
View(data)
data1<-data %>%
group_by(Species) %>%
summarise(Total_volume_L=sum(Volume_solution_ml)/1000)
library(tidyverse)
data1<-data %>%
group_by(Species) %>%
summarise(Total_volume_L=sum(Volume_solution_ml)/1000)
View(data1)
sum(Total_volume_L)
sum(data1$Total_volume_L)
data1 <- data1[order(data1$Total_volume_L),]
data1 <- data1[order(data1$Total_volume_L, decreasing = T),]
ggplot(data1, aes(x=Species, y=Total_volume_L))+
geom_bar(stat="identity")+
theme_bw()+
xlab("")+
ylab("Volume of soil solution (L)")
data1$Species<-factor(data1$Species, levels=data1$Species)
ggplot(data1, aes(x=Species, y=Total_volume_L))+
geom_bar(stat="identity")+
theme_bw()+
xlab("")+
ylab("Volume of soil solution (L)")
ggplot(data1, aes(x=Species, y=Total_volume_L))+
geom_bar(stat="identity")+
theme_bw()+
xlab("")+
ylab("Volume of soil solution (L)")+
theme(axis.text.x = element_text(angle=60, h=1, v=1))
ggplot(data1, aes(x=Species, y=Total_volume_L))+
geom_bar(stat="identity")+
theme_bw()+
xlab("")+
ylab("Volume of soil solution (L)")+
theme(axis.text.x = element_text(angle=60, h=1, v=1))+
scale_y_continuous(breaks=0:18)
ggplot(data1, aes(x=Species, y=Total_volume_L))+
geom_bar(stat="identity")+
theme_bw()+
xlab("")+
ylab("Volume of soil solution (L)")+
theme(axis.text.x = element_text(angle=60, h=1, v=1))+
scale_y_continuous(breaks=0:17)
ggplot(data1, aes(x=Species, y=Total_volume_L))+
geom_bar(stat="identity")+
theme_bw()+
xlab("")+
ylab("Volume of soil solution (L)")+
theme(axis.text.x = element_text(angle=60, h=1, v=1),
axis.title.y = element_text(margin=margin(r=10)))+
scale_y_continuous(breaks=0:17)
ggplot(data, aes(x=Species, y=pH_LEG))+
geom_jitter(width=0.2, shape=1)+
stat_summary(fun.data="mean_cl_boot")+
theme_bw()+
xlab("")+
ylab("pH")+
theme(axis.text.x = element_text(angle=60, h=1, v=1),
axis.title.y = element_text(margin=margin(r=10)))
ggplot(data, aes(x=Species, y=pH_LEG))+
geom_jitter(width=0, shape=1)+
stat_summary(fun.data="mean_cl_boot")+
theme_bw()+
xlab("")+
ylab("pH")+
theme(axis.text.x = element_text(angle=60, h=1, v=1),
axis.title.y = element_text(margin=margin(r=10)))
library(curl)
library(readr)
library(tidyverse)
library(readxl)
library(bibliometrix)
library(ggpubr)
library(dplyr)
library(igraph)
library(brainGraph)
setwd("C:/Users/Delory/Documents/GitHub/Co-citation_analysis")
M<-convert2df(file=c("Data/Results_WoS_1-500.txt",
"Data/Results_WoS_501-902.txt"),
format = "plaintext")
NetMatrix <- biblioNetwork(M,
analysis = "co-citation",
network = "references",
shortlabel = FALSE)
set.seed(123) #For reproducibility
net=networkPlot(NetMatrix,
n = 1000,
Title = "",
type = "fruchterman",
label=FALSE,
labelsize=1,
label.cex=FALSE,
label.color=FALSE,
label.n=0,
halo=FALSE,
cluster="louvain",
community.repulsion = 0.1,
size=1,
size.cex=FALSE,
remove.multiple=TRUE,
remove.isolates=TRUE,
edges.min=2,
verbose=FALSE)
data_plot<-cbind(net$cluster_res, net$layout)
data_plot$color<-igraph::V(net$graph)$color
colnames(data_plot)[6:7]<-c("x", "y")
library(RCy3)
install.packages("BiocManager")
BiocManager::install("RCy3")
library(RCy3)
cytoscapePing()
data.clust <- net$cluster_res
partco <- part_coeff(net$graph, memb = data.clust$cluster) # participation coefficient
within.moddeg <- within_module_deg_z_score(net$graph, memb = data.clust$cluster) # within module degree
rn.brainGraph <- as.data.frame(do.call(cbind, list(participation = partco, connectivity = within.moddeg)))
name <- rownames(rn.brainGraph)
rownames(rn.brainGraph) <- NULL
data <- cbind(name,rn.brainGraph)
data$role <- with(data, ifelse(connectivity > 2.5, 'Hub',
ifelse(connectivity < 2.5 & participation < 0.05, 'Ultra-peripheral',
ifelse(connectivity < 2.5 & participation < 0.62, 'Peripheral',
ifelse(connectivity < 2.5 & participation < 0.8, 'Connector', 'Kinless')))))
categories <- c("Connector", "Hub", "Peripheral", "Ultra-peripheral")
color <- c("#a7bf9c", "#33454e", "#81a9ad", "#e2e2d2")
ggplot(data, aes(x=participation, y=connectivity, color=role)) +
geom_point(size=2) +
scale_color_manual(breaks=categories, values=color)+
ylab("within-module degree") +
xlab("among-module connectivity \n (participation coefficient)") +
theme_classic() +
geom_hline(yintercept = 2.5, linetype = "dashed") +
geom_vline(xintercept = 0.62, linetype = "dashed")+
geom_label_repel(aes(label=ifelse(connectivity>2.5,as.character(name),'')),
size = 1.7,
segment.color = 'grey50')
library(ggrepel)
ggplot(data, aes(x=participation, y=connectivity, color=role)) +
geom_point(size=2) +
scale_color_manual(breaks=categories, values=color)+
ylab("within-module degree") +
xlab("among-module connectivity \n (participation coefficient)") +
theme_classic() +
geom_hline(yintercept = 2.5, linetype = "dashed") +
geom_vline(xintercept = 0.62, linetype = "dashed")+
geom_label_repel(aes(label=ifelse(connectivity>2.5,as.character(name),'')),
size = 1.7,
segment.color = 'grey50')
el <- data.frame(as_edgelist(net$graph)) # extract list of edges (pairs of vertices)
data.clust <- net$cluster_res
el <- el %>%
rename("vertex" = "X1")
el.join1 <- inner_join(el, data.clust, by = "vertex") # merge cluster info with vertex name for v1 (aka source)
el.join1 <- el.join1 %>%
rename("V1" = "vertex",
"V1.clust" = "cluster")
el.join1 <- el.join1 %>%
rename("vertex" = "X2")
el.join2 <- inner_join(el.join1, data.clust, by = "vertex") # merge cluster info with vertex name for v2 (aka target)
el.join.final <- el.join2 %>%
rename("V2" = "vertex",
"V2.clust" = "cluster")
# identify if co-citation is between papers within same cluster or across clusters
el.join.final$within.v.across <- with(el.join.final, ifelse(V1.clust == V2.clust, 'Within', 'Across'))
el.join.final$No.Edge <- c(1) # add value of 1 for each row = 1 edge
connect.clust <- el.join.final %>%
mutate(V1.clust = recode(V1.clust, '1' = "Theory, etc.", '2' = "Animals", '3' =  "Plants", '4' = "Evolution", '5' = "Parasitology", '6' = "Polar" ))
connect.clust <- connect.clust %>%
mutate(V2.clust = recode(V2.clust, '1' = "Theory, etc.", '2' = "Animals", '3' =  "Plants", '4' = "Evolution", '5' = "Parasitology", '6' = "Polar" ))
connect.clust.sum <- connect.clust %>%
group_by(V1.clust, within.v.across) %>%
summarise(sum = sum(No.Edge))
connect.clust %>%
group_by(V1.clust) %>%
summarise(sum = sum(No.Edge)) # to get total number of co-citations by cluster for x-axis annotation
# stacked bar plot
ggplot(connect.clust.sum, aes(x = factor(V1.clust, levels = c("Theory, etc.", "Animals", "Plants", "Evolution", "Parasitology", "Polar")),
y = sum, fill=within.v.across)) +
scale_fill_manual(values=c("#c7e9b4", "#2c7fb8")) +
geom_bar(position="fill", stat="identity") +
theme_classic() +
labs(y = "Proportion of Co-citations")+
theme(axis.title.x = element_blank(),
legend.title = element_blank(),
legend.position="top",
legend.justification="right")+
scale_x_discrete(labels=c("Theory\n (15,849)", "Animals\n (3,018)", "Plants\n (10,061)", "Evolution\n (2,356)", "Parasitol.\n (399)", "Polar\n (3,086)"))
connect.clust.sum2 <- connect.clust %>%
group_by(V1.clust, V2.clust) %>%
summarise(sum = sum(No.Edge))
print(tbl_df(connect.clust.sum2), n=25) # show full df
connect.clust.sum2.across <- connect.clust.sum2[-c(1,7,13,18,25),] # remove rows that show total within cluster, except Polar
connect.clust.sum2.across %>%
group_by(V1.clust) %>%
summarise(sum = sum(sum)) # to get total number of across-cluster co-citations by cluster for x-axis annotation
# stacked bar plot
ggplot(connect.clust.sum2.across, aes(x = factor(V1.clust, levels = c("Theory, etc.", "Animals", "Plants", "Evolution", "Parasitology", "Polar")),
y = sum, fill=factor(V2.clust, levels = c("Theory, etc.", "Animals", "Plants", "Evolution", "Parasitology", "Polar")))) +
scale_fill_manual(values=c("#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#0c2c84")) +
geom_bar(position="fill", stat="identity") +
theme_classic() +
labs(y = "Proportion of Co-citations")+
theme(axis.title.x = element_blank(),
legend.title = element_blank(),
legend.position="top",
legend.justification="right") +
scale_x_discrete(labels=c("Theory\n (5,705)", "Animals\n (1,309)", "Plants\n (1,415)", "Evolution\n (693)", "Parasitol.\n (24)", "Polar\n (0)"))
